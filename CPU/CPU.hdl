CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
   	NandNot(in=instruction[15], out=notOp);
    myMux16(a=aluOut, b=instruction, sel=notOp, out=entryMuxOut);

    NandOr(a=notOp, b=instruction[5], out=intoA);
    ARegister(in=entryMuxOut, load=intoA, out=A, out[0..14]=addressM);

   
    NandAnd(a=instruction[15], b=instruction[12], out=AMSwitch);
    myMux16(a=A, b=inM, sel=AMSwitch, out=AM);

    NandAnd(a=instruction[15], b=instruction[4], out=intoD);
    DRegister(in=aluOut,load=intoD, out=D);

    myALU(x=D, y=AM, zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        zr=zrOut,
        ng=ngOut,
        out=aluOut, 
        out=outM);

    
    NandAnd(a=instruction[15], b=instruction[3], out=writeM);

    
    NandNot(in=ngOut, out=pos);
    NandNot(in=zrOut, out=nzr);
    NandAnd(a=instruction[15], b=instruction[0], out=jgt);
    NandAnd(a=pos, b=nzr, out=posnzr);
    NandAnd(a=jgt, b=posnzr, out=ld1);

    NandAnd(a=instruction[15], b=instruction[1], out=jeq);
    NandAnd(a=jeq, b=zrOut, out=ld2);

    NandAnd(a=instruction[15], b=instruction[2], out=jlt);
    NandAnd(a=jlt, b=ngOut, out=ld3);

    NandOr(a=ld1, b=ld2, out=ldt);
    NandOr(a=ld3, b=ldt, out=ld);

    myPC(in=A, load=ld, inc=true, reset=reset, out[0..14]=pc);


}